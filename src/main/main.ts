import { app, BrowserWindow, Menu, dialog, ipcMain } from 'electron';

import * as fs from "fs";
import * as path from "path";
import { ChildProcess, exec, spawn } from "child_process";
import os from 'os';

import ejs from 'ejs';
import log from 'electron-log';


import { buildAppMenu } from './menu';


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

import FileState from "./FileState";
const fileState = FileState.getInstance();

let plantUMLProcesses: ChildProcess[] = []; // プロセス管理用リスト
let isQuitting = false;     // アプリが終了中かを示すフラグ

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const isDev = process.env.NODE_ENV === 'development';

const tempDir = path.join(os.tmpdir(), "kaede-pu");
if (!fs.existsSync(tempDir)) {
  fs.mkdirSync(tempDir, { recursive: true });
}

const createWindow = (): void => {

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 810,
    width: 1440,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Create the menu.
  const menu = buildAppMenu(mainWindow);
  Menu.setApplicationMenu(menu);

  ipcMain.on('send-editor-value', async (_event, value, isSaveAs) => {
    let saveFilePath = ""
    const currentFilePath = fileState.getCurrentFilePath();
    if (currentFilePath !== null) {
      saveFilePath = currentFilePath;
    }

    if (isSaveAs || saveFilePath === undefined || saveFilePath === "") {
      const { canceled, filePath } = await dialog.showSaveDialog({
        filters: [
          { name: 'Documents', extensions: ['md'] }
        ]
      })
      if (canceled === true) return;
      if (filePath === "") return;
      saveFilePath = filePath;
      fileState.setCurrentFilePath(saveFilePath)
    }

    if (saveFilePath !== "") {
      console.log("saveFilePath:" + saveFilePath);
      fs.writeFile(saveFilePath, value, (error) => {
        if (error != null) {
          console.log("save error.");
          return;
        }
      })
    }
  })

  ipcMain.on('send-html', async (_event, value) => {
    const templatePath = path.join(__dirname, "templates", "index.ejs");
    const jsFilePath = path.join(__dirname, "templates", "mermaid.min.js");
    const template = await fs.promises.readFile(templatePath, 'utf-8');
    const js = fs.readFileSync(jsFilePath);
    const renderedHtml = ejs.render(template, {
      htmlContent: value,
      jsContent: js
    });

    const { filePath, canceled } = await dialog.showSaveDialog({
      title: 'HTMLファイルを保存',
      filters: [{ name: 'HTML Files', extensions: ['html'] }],
    });

    if (!canceled) {
      await fs.promises.writeFile(filePath, renderedHtml, 'utf-8');
    }
  })

  ipcMain.handle("get-svg", (_event, values) => {
    log.info('Start generate SVG File.');
    const content = "@startuml\n" + values[0] + "@enduml\n";

    const plantUMLPath = isDev
      ? path.join(__dirname, 'resources', 'plantuml.jar')
      : path.join(path.dirname(app.getPath('exe')), 'resources', 'plantuml.jar')

    const tempPUFilePath = path.join(tempDir, `temp_${values[1]}.pu`);
    const tempSVGFilePath = path.join(tempDir, `temp_${values[1]}.svg`);

    const command = `java -jar "${plantUMLPath}" -svg "${tempPUFilePath}" -charset UTF-8`;
    log.info(command);

    fs.writeFileSync(tempPUFilePath, content, { encoding: "utf8" });

    return new Promise((resolve, reject) => {
      log.info('brefore: call plantUML.jar');
      const process = exec(command, { encoding: "utf8" }, (error, stdout, stderr) => {
        log.info('after: call plantUML.jar');
        if (error) {
          log.error(error);
          log.error(stderr);
          if (fs.existsSync(tempSVGFilePath)) {
            fs.unlinkSync(tempPUFilePath);
            fs.unlinkSync(tempSVGFilePath);
          }
          reject("");
        } else {
          log.info(stdout);
          if (fs.existsSync(tempSVGFilePath)) {
            const svg = fs.readFileSync(tempSVGFilePath, { encoding: "utf8" });
            fs.unlinkSync(tempPUFilePath);
            fs.unlinkSync(tempSVGFilePath);
            resolve(svg);
          } else {
            resolve("");
          }
        }
      });
      // プロセスをリストに登録
      plantUMLProcesses.push(process);

      // プロセス完了時にリストから削除
      process.on('exit', () => {
        plantUMLProcesses = plantUMLProcesses.filter((p) => p !== process);
      });

    });
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (isDev) {
    mainWindow.webContents.openDevTools();
  }

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);


app.on('before-quit', (event) => {
  log.info("before-quit")
  if (isQuitting) return;
  isQuitting = true;
  event.preventDefault();

  log.log('Waiting for all PlantUML processes to complete...');

  const timeout = new Promise((resolve) => {
    setTimeout(() => {
      log.warn('Timeout reached. Forcing quit...');
      plantUMLProcesses.forEach((process) => process.kill('SIGKILL'));
      resolve("");
    }, 10000); // 10秒待機
  });

  try {
    Promise.race([
      Promise.all(
        plantUMLProcesses.map((process) => {
          return new Promise((resolve) => {
            process.on('exit', () => resolve(""));
            process.kill('SIGINT');
          });
        })
      ),
      timeout,
    ]).then(() => {
      log.log('All processes handled. Quitting app...');
    })
  } catch (error) {
    log.error(`Error while waiting for processes to complete: ${error}`);
  } finally {
    // tempフォルダの削除
    if (fs.existsSync(tempDir)) {
      fs.rmSync(tempDir, { recursive: true, force: true });
    }

    app.quit();
  }

});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {

  // 実行中のプロセスをすべて終了させる
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
